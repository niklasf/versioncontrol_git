<?php

require_once drupal_get_path('module', 'versioncontrol') . '/tests/VersioncontrolTestCase.test';

abstract class VersioncontrolGitTestCase extends VersioncontrolTestCase {

  /**
   * An internal counter used to prevent filesystem collisions when creating
   * multiple git repositories.
   *
   * @var int
   */
  protected $repocount = 0;

  /**
   * State var indicating whether the test repo syncing logic has already been
   * run; no point in running it more than once, just generates noise.
   *
   * @var bool
   */
  protected $testRepoChecked = FALSE;

  public function setUp() {
    // Get the git path before clearing all vars. If no git binary is found, the
    // function will throw an error that safely terminates the test.
    $gitpath = _versioncontrol_git_get_binary_path();

    // Each test cleans up its repos, so ensure we start over at 0. This might
    // be superfluous if SimpleTest creates a new test object for each test.
    $this->repocount = 0;
    $args = func_get_args();
    if (array_search('versioncontrol_git', $args) === FALSE) {
      $args[] = 'versioncontrol_git';
    }
    call_user_func_array(array('VersioncontrolGitTestCase', 'parent::setUp'), $args);

    // Set the git path in the sandboxed $conf so it gets used properly
    variable_set('versioncontrol_git_binary_path', $gitpath);
  }

  /**
   * Create a new Git repository on disk & in the db using the well-known,
   * structured sample test repository.
   *
   * The repository is created at a derived location on disk that ensures it
   * will be automatically cleaned up when the test is completed.
   *
   * @param array $data
   *   An optional array of data to be passed to the entity builder for the
   *   repository. @see VersioncontrolTestCase::versioncontrolCreateRepository()
   *
   * @param bool $sync
   *   If TRUE, repository is synced after creation.
   *
   * @return VersioncontrolGitRepository
   */
  public function versioncontrolCreateRepoFromTestRepo($data = array(), $sync = TRUE) {
    $this->repocount++;
    $path = file_directory_path() . '/vc_git/repositories/' . $this->repocount . '.git';
    $tarball = drupal_get_path('module', 'versioncontrol_git') . '/tests/testrepo.tar.bz2';
    mkdir($path, 0777, TRUE);
    exec("tar -xf $tarball -C $path");

    $data = array(
      'root' => $path,
      'plugins' => array(
        'reposync' => 'git_default',
      ),
    )  + $data;

    $repo = $this->versioncontrolCreateRepository('git', $data);
    $this->assertTrue($repo->isValidGitRepo(), 'Valid git repository created at the expected location.');

    if ($sync) {
      $this->versioncontrolSyncTestRepository($repo);
    }

    return $repo;
  }

  /**
   * Create a new Git repository on disk & in the db by cloning an existing
   * repository from some remote location.
   *
   * The repository is created at a derived location on disk that ensures it
   * will be automatically cleaned up when the test is completed.
   *
   * @param string $remote
   *   A string representing a valid git remote url (e.g.,
   *   git://git.drupal.org/project/versioncontrol.git), from which the new
   *   repository should be cloned.
   *
   * @param array $data
   *   An optional array of data to be passed to the entity builder for the
   *   repository. @see VersioncontrolTestCase::versioncontrolCreateRepository()
   *
   * @return VersioncontrolGitRepository
   */
  public function versioncontrolCreateRepoFromClone($remote, $data = array()) {
    $this->repocount++;
    $path = file_directory_path() . '/vc_git/repositories/' . $this->repocount . '.git';

    $data = array(
      'root' => $path,
    ) + $data;

    $repo = $this->versioncontrolCreateRepository('git', $data);
    $repo->exec("clone --bare $remote $path");
    $this->assertTrue($repo->isValidGitRepo(), 'Valid git repository created at the expected location.');

    return $repo;
  }

  /**
   * Run history synchronization on an instance of the standard test repository.
   *
   * The test repository has the following characteristics:
   *
   *  - 16 commits
   *  - 18 'items' (files)
   *  - 4 branches - master, enhancements, feature, fixes
   *  - 3 tags - simple, signed, annotated (each having the characteristics
   *    for which they're named)
   *  - 45 commit/label mappings
   *
   * @param VersioncontrolGitRepository $repository
   *   The VersioncontrolGitRepository object representing the test repository
   *   to synchronize.
   */
  public function versioncontrolSyncTestRepository(VersioncontrolGitRepository $repository) {
    $sync = $repository->getSynchronizer();
    $synced = $sync->initialSync();

    if (!$this->testRepoChecked) {
      // It's pointless to run these checks more than once.
      $this->testRepoChecked = TRUE;
      $this->assertTrue($synced, t('Sync of test repository completed successfully.'));
      $this->assertEqual(count($repository->loadCommits()), 16, t('Sync of test repository resulted in correct number of commits.'));
      $this->assertEqual(count($repository->loadBranches()), 4, t('Sync of test repository resulted in correct number of branches.'));
      $this->assertEqual(count($repository->loadTags()), 3, t('Sync of test repository resulted in correct number of tags.'));
      $op_label_count = db_result(db_query('SELECT COUNT(*) FROM {versioncontrol_operation_labels} vol INNER JOIN {versioncontrol_labels} vl ON vol.label_id = vl.label_id WHERE vl.repo_id = %d', $repository->repo_id));
      $this->assertEqual($op_label_count, 45, t('Sync of test repository resulted in correct number of commit/label mappings.'));
    }
  }

}
