<?php

/**
 * @file
 *
 * Tests ensuring that VersioncontrolGitEvent works.
 */

require_once drupal_get_path('module', 'versioncontrol_git') . '/tests/VersioncontrolGitTestCase.test';

class VersioncontrolGitEventTests extends VersioncontrolGitTestCase {
  protected $repos = array();

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Git event tests'),
      'description' => t('Tests ensuring that Git events work.'),
      'group' => t('Version Control Git'),
    );
  }
  
  /**
   * Tests if VersioncontrolGitEvents are properly created and inserted in the database.
   */
  public function testCreation() {
    // Build and insert.
    $repo = $this->versioncontrolCreateRepoFromTestRepo();
    
    $data = array(
      'repository' => $repo,
      'refname' => $this->randomString(255),
      'label_id' => 0,
      'reftype' => 2,
      'old_obj' => $this->randomString(40),
      'new_obj' => $this->randomString(40),
      'commits' => serialize(array()),
    );
    
    $event = $this->versioncontrolCreateEvent('git', $data);

    // Verify.
    $db_event = db_select('versioncontrol_git_event_data', 'ged')
      ->fields('ged')
      ->condition('elid', $event->elid)
      ->execute()
      ->fetchObject();
    foreach ($data as $key => $val) {
      if ($key != 'repository') {
        $this->assertEqual($val, $db_event->$key, t('%key event attribute is stored correctly', array('%key' => $key)), t('Creation'));
      }
    }
  }
  
  /**
   * Test if commits linked to a VersioncontrolGitEvent are properly loaded.
   */
  public function testCreateLoadCommits() {
    $repo = $this->versioncontrolCreateRepoFromTestRepo();
    
    $data = array(
      'repository' => $repo,
    );
    
    $commits = array();
    $commits[] = $this->versioncontrolCreateOperation('git', $data);
    $commits[] = $this->versioncontrolCreateOperation('git', $data);
    $commits[] = $this->versioncontrolCreateOperation('git', $data);
    
    $commits_raw = array();
    foreach ($commits as $commit) {
      $commits_raw[] = $commit->revision;
    }
    
    $data['commits'] = serialize($commits_raw);
    
    $event = $this->versioncontrolCreateEvent('git', $data);
    
    $commits_loaded = $event->loadCommits();
    foreach ($commits_loaded as &$commit) {
      $commit = $commit->revision;
    }
    
    $this->assertEqual($commits_raw, array_values($commits_loaded), t("Commits linked to VersioncontrolGitEvent are properly loaded."));
  }
}